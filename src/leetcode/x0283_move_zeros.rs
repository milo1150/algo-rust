#[allow(dead_code)]
pub fn move_zeroes(nums: &mut Vec<i32>) {
    if nums.len() > 10_i32.pow(4) as usize {
        return;
    }
    println!("input = {nums:?}");
    let mut result: Vec<i32> = vec![];
    let mut skip_index: i32 = 0;
    for (_, num) in nums.iter().enumerate() {
        println!("result before = {result:?}");
        if *num == 0 {
            result.push(0);
            skip_index += 1;
        } else {
            result.insert(result.len() - skip_index as usize, *num as i32);
        }

        println!("result after = {result:?}");
    }
    *nums = result
}

#[cfg(test)]
mod test {
    use super::*;

    #[test]
    #[ignore]
    fn move_zeroes_1() {
        let mut input = vec![0, 1, 0, 3, 12];
        let expected = vec![1, 3, 12, 0, 0];
        move_zeroes(&mut input);
        assert_eq!(input, expected);
    }

    #[test]
    #[ignore]
    fn move_zeroes_2() {
        let mut input = vec![0];
        let expected = vec![0];
        move_zeroes(&mut input);
        assert_eq!(input, expected);
    }

    #[test]
    #[ignore]
    fn move_zeroes_3() {
        let mut input = vec![
            -53760, 84068, -16069, 72746, 58690, -71149, -22950, -12274, 96637, -81284, -39127,
            -49651, -17647, 58022, -44789, 58691, -16147, -14319, 14896, 895, 57955, 27033, -70106,
            68552, 8416, -77243, -35301, 27253, 95595, -27195, -8996, -17886, 98974, -39038,
            -99612, -92071, -11299, 3482, -53441, -9649, -65402, 40503, -17338, -64641, -7897,
            -94005, -80726, 0, -96691, -47830, -13500, -18458, -51458, 16976, -4899, 63670, -76323,
            91906, -51742, 95588, 83634, 28742, -66729, -82026, 14786, 0, -52143, 83663, 20022,
            -52850, -92499, -74631, 33067, 17901, -22932, -26561, -25170, 89490, 95464, 60769,
            16495, 44798, -19605, 3128, -67702, 4839, -58592, 74850, 89144, 23899, -9077, -58725,
            -83740, -82577, 6516, 61472, 0, -50701, 0, -31098, -63933, 0, -68278, -95238, -18958,
            42944, -85909, -39514, 65248, 8536, -57445, -86338, 10938, 36809, -86427, -28207, 4323,
        ];
        let expected = vec![
            -53760, 84068, -16069, 72746, 58690, -71149, -22950, -12274, 96637, -81284, -39127,
            -49651, -17647, 58022, -44789, 58691, -16147, -14319, 14896, 895, 57955, 27033, -70106,
            68552, 8416, -77243, -35301, 27253, 95595, -27195, -8996, -17886, 98974, -39038,
            -99612, -92071, -11299, 3482, -53441, -9649, -65402, 40503, -17338, -64641, -7897,
            -94005, -80726, -96691, -47830, -13500, -18458, -51458, 16976, -4899, 63670, -76323,
            91906, -51742, 95588, 83634, 28742, -66729, -82026, 14786, -52143, 83663, 20022,
            -52850, -92499, -74631, 33067, 17901, -22932, -26561, -25170, 89490, 95464, 60769,
            16495, 44798, -19605, 3128, -67702, 4839, -58592, 74850, 89144, 23899, -9077, -58725,
            -83740, -82577, 6516, 61472, -50701, -31098, -63933, -68278, -95238, -18958, 42944,
            -85909, -39514, 65248, 8536, -57445, -86338, 10938, 36809, -86427, -28207, 4323, 0, 0,
            0, 0, 0,
        ];
        move_zeroes(&mut input);
        assert_eq!(input, expected);
    }
}
